name: Backend CI/CD Pipeline

on:
  push:
    branches-ignore:
      - main
      - master
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs: 

  # Job 2: Build Backend
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npx prisma generate

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Create deployment package
        working-directory: ./backend
        run: |
          # Create deployment directory
          mkdir -p deploy
          
          # Copy built files
          cp -r dist/ deploy/
          cp package*.json deploy/
          cp prisma/ deploy/ -r
          
          # Copy environment template
          cp .env.example deploy/.env 2>/dev/null || echo "No .env.example found"
          
          # Create deployment archive
          tar -czf ../backend-deploy.tar.gz -C deploy .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend-deploy.tar.gz
          retention-days: 30

  # Job 3: Deploy to EC2
  deploy-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [build-backend]
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER || 'ec2-user' }}
          EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          APP_NAME: ${{ secrets.APP_NAME || 'ai4devs-backend' }}
        run: |
          # Setup SSH
          echo "$EC2_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy deployment package to EC2
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            backend-deploy.tar.gz $EC2_USER@$EC2_HOST:/tmp/
          
          # Deploy on EC2
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            
            # Create app directory if it doesn't exist
            sudo mkdir -p /opt/$APP_NAME
            sudo chown $USER:$USER /opt/$APP_NAME
            
            # Stop existing application
            pm2 stop $APP_NAME || true
            pm2 delete $APP_NAME || true
            
            # Extract new deployment
            cd /opt/$APP_NAME
            rm -rf * || true
            tar -xzf /tmp/backend-deploy.tar.gz
            
            # Install production dependencies
            npm ci --only=production
            
            # Setup environment variables (you should customize this)
            if [ ! -f .env ]; then
              echo "DATABASE_URL=$DATABASE_URL" > .env
              echo "PORT=3010" >> .env
              echo "NODE_ENV=production" >> .env
            fi
            
            # Run database migrations
            npx prisma migrate deploy
            
            # Start application with PM2
            pm2 start dist/index.js --name $APP_NAME
            pm2 save
            
            # Cleanup
            rm /tmp/backend-deploy.tar.gz
          EOF
          
          # Cleanup local SSH key
          rm private_key.pem

      - name: Health check
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Wait for application to start
          sleep 30
          
          # Simple health check
          curl -f http://$EC2_HOST:3010/health || curl -f http://$EC2_HOST:3010/ || {
            echo "Health check failed"
            exit 1
          }

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… Deployment successful!"
          echo "Backend deployed to: http://${{ secrets.EC2_HOST }}:3010"
