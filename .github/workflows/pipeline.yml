name: Backend Pipeline

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'frontend/**'
      - 'README.md'
      - 'LICENSE.md'

jobs:
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Run tests
        working-directory: ./backend
        run: npm test
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: backend/coverage/
          retention-days: 7

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Generate Prisma client
        working-directory: ./backend
        run: npm run prisma:generate
        
      - name: Build application
        working-directory: ./backend
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist/
          retention-days: 1

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --only=production
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          
      - name: Deploy to EC2
        env:
          EC2_INSTANCE: ${{ secrets.EC2_INSTANCE }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Create deployment script
          cat > deploy.sh << EOF
          #!/bin/bash
          set -e
          
          # Stop the current application (ignore if not running)
          sudo systemctl stop backend-app 2>/dev/null || true
          
          # Create backup of current version if it exists
          if [ -d "/opt/backend" ]; then
            sudo cp -r /opt/backend /opt/backend.backup.\$(date +%Y%m%d_%H%M%S) || true
          fi
          
          # Remove old backend directory if it exists
          sudo rm -rf /opt/backend 2>/dev/null || true
          
          # Create new backend directory with proper ownership
          sudo mkdir -p /opt/backend
          sudo chown \$EC2_USER:\$EC2_USER /opt/backend
          
          # Copy new files
          sudo cp -r * /opt/backend/
          
          # Set proper permissions for all files
          sudo chown -R \$EC2_USER:\$EC2_USER /opt/backend
          sudo chmod +x /opt/backend/dist/index.js 2>/dev/null || true
          
          # Install production dependencies as the correct user
          cd /opt/backend
          sudo -u \$EC2_USER npm ci --only=production --no-optional
          
          # Generate Prisma client as the correct user
          sudo -u \$EC2_USER npx prisma generate
          
          # Create systemd service file if it doesn't exist
          sudo tee /etc/systemd/system/backend-app.service > /dev/null << SERVICEEOF
          [Unit]
          Description=Backend Application
          After=network.target
          
          [Service]
          Type=simple
          User=\$EC2_USER
          WorkingDirectory=/opt/backend
          ExecStart=/usr/bin/node dist/index.js
          Restart=always
          RestartSec=10
          Environment=NODE_ENV=production
          
          [Install]
          WantedBy=multi-user.target
          SERVICEEOF
          
          # Reload systemd and enable service
          sudo systemctl daemon-reload
          sudo systemctl enable backend-app
          
          # Start the application
          sudo systemctl start backend-app
          
          # Wait a moment for the service to start
          sleep 5
          
          # Check if service is running
          if sudo systemctl is-active --quiet backend-app; then
            echo "Deployment successful!"
            sudo systemctl status backend-app --no-pager
          else
            echo "Deployment failed! Rolling back..."
            sudo systemctl stop backend-app 2>/dev/null || true
            sudo rm -rf /opt/backend
            if [ -d "/opt/backend.backup."* ]; then
              sudo mv /opt/backend.backup.* /opt/backend
              sudo systemctl start backend-app
            fi
            exit 1
          fi
          EOF
          
          # Copy files to EC2
          scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no -r backend/* \$EC2_USER@\$EC2_INSTANCE:/tmp/backend/
          scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no deploy.sh \$EC2_USER@\$EC2_INSTANCE:/tmp/
          
          # Execute deployment
          ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \$EC2_USER@\$EC2_INSTANCE "chmod +x /tmp/deploy.sh && cd /tmp/backend && /tmp/deploy.sh"
